			Last revised 23-Feb-15

			    Problem Set 5

		 Harvard Extension School CSCI E-95:
	   Compiler Design and Implementation - Spring 2015

		   Due: Midnight on April 19, 2015

1. (100 Points) Based on all the work you have completed so far, your
lexer from Problem Set 1, your YACC or Bison parser from Problem Set
2, your symbol table management system from Problem Set 3, and the
type checker from Problem Set 4, develop code to walk over the parse
tree and generate intermediate code to allow optimization and real
code generation to take place in the future.

Using the three-address representation we discussed in class, walk
over the parse tree -- which, after Problem Set 4, is type correct --
and emit intermediate instructions in a doubly linked-list
representation.  Proceed with the simpler parse tree nodes first and
then progress to the more complicated nodes.  Remember that many
instructions in the intermediate code representation may contain fewer
than three addresses.

When generating the intermediate representation (IR) code, assume that
an infinite number of registers is available.  Therefore, you should
generate a new register temporary as the result of each IR node
(except if the result is a user-specified location).  During the code
generation phase these temporaries will be allocated to real
registers.

Your IR code should be based on a load/store architecture.  That is,
the only instructions to directly access named user identifiers are
load and store operations (and their variants, such as, loadAddress).

Additionally, all object type information, such as signedness and
size, should be reflected in the opcode of the IR node rather than
determined from the type of an operand.  Therefore, there may be
several versions of opcodes to perform, say, less-than comparison -- a
signed word less-than comparison (lessThanSigned) and an unsigned word
less-than comparison (lessThanUnsigned).  Similarly, there will need
to be several versions of the loadIndirect opcode -- a
loadIndirectByte, a loadIndirectHalfWord, and a loadIndirectWord.
Because of the type conversions that are defined by the C Programming
Language, many versions of opcodes could never be utilized and should
not be defined (such as addHalfWord).  Also, some type information may
not be relevant to some opcodes and may be omitted.  For example,
there is no need to distinguish loadIndirectSignedWord from
loadIndirectUnsignedWord -- either of these IR instuctions should be
emitted as loadIndirectWord.

The C Standard allows the right shift operator, >>, when applied to a
signed left operand, to either sign extend the operand or to shift in
zeros.  In our implementation, when the right shift operator is
applied to a signed left operand, we will sign extend it.

The label/address operand of all branching opcodes should be resolved
to a pointer to the relevant IR node to which it refers by the end of
the generation of IR code (i.e., by the end of Problem Set 5).  These
references may be left in a backpatching list to be resolved at the
end of PS5.

As described in class, always evaluate an expression as an lvalue, if
possible.  Only convert an lvalue to an rvalue when needed.  Tag each
temporary to indicate if it is an lvalue or an rvalue.

Write a pretty-printer for the intermediate code instructions in the
linked-list representation so that we can see the code you generated from
your parse tree.

As always, the solution that you turn in should include a demonstration
that your program works and has been tested.  Thus, the test programs
you use as input and the output that your compiler produces should be
included with your other files.
