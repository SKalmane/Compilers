			Last revised 23-Feb-15

			    Final Project

		 Harvard Extension School CSCI E-95:
	   Compiler Design and Implementation - Spring 2015

			  Due: May 12, 2015

Based on all the work you have completed so far, your lexer from
Problem Set 1, your YACC, Bison, or ANTLR parser from Problem Set 2,
your symbol table management system from Problem Set 3, the type
checker from Problem Set 4, the intermediate code generator from
Problem Set 5, and the MIPS assembly code generator from Problem Set
6, enhance your compiler by adding interesting optimizations.

Your final project will be the culmination of the semester's work on
the compiler.  The additional work for the final project will include
cleaning up, testing, and polishing the entire compiler.  This would
also be a good time to read over all of your code, complete those
components delayed for later completion, and adding comments and
documentation to make your compiler more readable.

Specifically, you will be writing several optimizations each of which
will modify the linked list of IR nodes.  In class we have talked
about many different optimizations and the importance of ordering them
appropriately.  Part of the final project is to select both an
interesting selection of optimizations and also those that will make a
significant impact on the sample test programs you will be compiling.
This is now your chance to improve the unoptimized code generated by
Problem Set 5!

Your final project should include the source program to your compiler,
the output from the previous compiler stages (including the IR code
both before and after optimization), a printout of the MIPS code
produced by the code generation component, and a transcript of running
the MIPS code under SPIM.

It is particularly important for the final project to turn in a
submission the is cleanly coded, well-commented and well-documented,
includes a demonstration that your program works and has been tested.
Thus, the test programs you use as input and the output that your
compiler produces should be included with your other files.

During the final class meeting, you will be demonstrating your
compiler to the class.  Each student will he given approximately
fifteen minutes for their presentation.  For this event, choose
suitable programs to be compiled (the input to your compiler) so that
they demonstrate the capabilities of your compiler.  Also, decide in
advance which intermediate stage outputs and debugging outputs are
most appropriate to display in front of the class.  Plan on using the
video projector connected to your laptop.
