			Last revised 2-Mar-15

			    Problem Set 2

		 Harvard Extension School CSCI E-95:
	   Compiler Design and Implementation - Spring 2015

		    Due: Midnight on March 1, 2015

1. (300 Points) Using your lexer from Problem Set 1, write a simple
parser for the applicable part of the attached grammar.  Your parser
must be written using a YACC or Bison parser generator.

As your compiler reads the input program being compiled, it should
generate a parse tree in memory which represents that program.  The
parse tree should abstract away all syntactic structures.  Other than
outputting error messages for ill-formed input, your program should
build an internal tree data structure which represents the parsed
structure of the input file.  For this assignment, there is no need to
build a symbol table for any identifiers declared in the input
program.  Instead, tokens which represent identifier strings should
simply appear at the appropriate points in the parse tree.

In our language, functions cannot be declared as arguments nor passed
as arguments to a function.

Identifiers may be declared at:
    file scope
    parameter scope
    block scope

Functions may be declared only at file scope.

Identifiers may identify:
    a variable
    a function
    a parameter to a function

The allowable types are:
    char	    signed char		unsigned char

    short	    signed short	unsigned short
    short int	    signed short int	unsigned short int

    int		    signed int		unsigned int
    		    signed 		unsigned

    long	    signed long		unsigned long
    long int	    signed long int	unsigned long int

In all cases, a type without a "signed" or "unsigned" modifier will be
considered to be signed.

The reserved word "void" may be used only as the return type of a
function or as the only parameter of a function.  Your implementation
must require a return type to be specified for each function (in both
declarations and definitions).  A parameter list must be specified for
each function (of course, it is possible to specify "void").  In other
words, we are not allowing the nonprototype, or traditional, form for
function parameters.

In addition to the base types defined above, your parser should accept
pointers (any depth of pointers to pointers) and arrays (any number of
dimensions).  You do not need to implement pointers to functions
(usually referred to as function pointers).

The C programming language distinguishes a declaration from a
definition.  A declaration is a statement that sets forth the name of
an identifier, but does not necessarily reserve storage for that
identifier.  A definition is a declaration statement that also
reserves storage for an identifier.  In our implementation, we will
not allow declarations of variables that are not also definitions of
those variables.  The C programming language allows an initial
tentative declaration and later declarations that add information to
that initial declaration.  In our implementation, we will allow only
one declaration of an identifier at any one scope.  The one exception
to this rule is that we will allow a declaration of a function that is
not a definition (i.e., for a function, we will allow a declaration of
the types of the return value and parameters -- with or without names
of the formal parameters -- without specifying the body of the
function).  This is required so that we can have a forward declaration
of a function to allow the function to be called before being defined
(necessary for where an ordering of function definitions before being
called is not possible).

No initializers will be allowed in a definition.

Your program should be written in C or C++.  It should read a program
written in our C-subset language from standard in and emit error
messages to standard error.  After reaching the end of the input, your
program should output to standard out a pretty print of the parse tree
you created from the input file.

In the pretty print output, parentheses should be emitted around each
sub-expression.  For example, the expression "a = b+c/d++*e" should be
pretty printed as "(a=(b+((c/(d++))*e)))".

In addition, in the pretty print output, parentheses should be emitted
around each component in a declarator.  For example, the declaration
"unsigned (*a[10+2])(char)" should be pretty printed as "(unsigned int
(*(a[(10+2)]))(signed char))".

This is a good time to start to develop a reasonable methodology to
recover from errors in the compiler's input stream.  It is not
sufficent to abort the compilation process when an error is detected.
You should be able to recover from errors and continue to process as
much of the remainder of the input stream as possible.  This is one
area in the compilation process that will distinguish a better
compiler from one that does not recover from errors as well.

Remember to tag your git submission with ps2-submit.
